/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 214 */
static int keywordCode(const char *z, int n, int *pType){
  /* zText[] encodes 923 bytes of keywords in 613 bytes */
  /*   REINDEXEDESCAPELSELECTABLEFTHENDATABASEXPLAINSTEADDEFERRABLE       */
  /*   LSIFOREIGNOREGEXPLANALYZEXCEPTRANSACTIONATURALTERAISEXCLUSIVE      */
  /*   XECONSTRAINTERSECTRIGGEREFERENCESAVEPOINTOFFSETEMPORARYBEFORE      */
  /*   ACHECKEYUNIQUERYWITHOUTERELEASEXISTSATTACHAVINGROUPDATEBEGIN       */
  /*   NERECURSIVEBETWEENOTNULLIKECASCADELETECASECOLLATECREATE            */
  /*   CURRENT_DATEDETACHIMMEDIATEJOINSERTMATCHPRAGMABORTVALUES           */
  /*   VIRTUALIMITWHENWHERENAMEAFTEREPLACEANDEFAULTAUTOINCREMENTCAST      */
  /*   COLUMNCOMMITCONFLICTCROSSCURRENT_TIMESTAMPARTITIONDEFERRED         */
  /*   EFINEDISTINCTDROPRIMARYFAILOOPFROMFULLUCIAGLOBYISNULLORDER         */
  /*   ESTRICTOVERIGHTROLLBACKROWEBGRPUNIONUSINGVACUUMWEBPROCWEBPWD       */
  /*   WEBUSRWEBVIEWINITIALLY                                             */
  static const char zText[612] = {
    'R','E','I','N','D','E','X','E','D','E','S','C','A','P','E','L','S','E',
    'L','E','C','T','A','B','L','E','F','T','H','E','N','D','A','T','A','B',
    'A','S','E','X','P','L','A','I','N','S','T','E','A','D','D','E','F','E',
    'R','R','A','B','L','E','L','S','I','F','O','R','E','I','G','N','O','R',
    'E','G','E','X','P','L','A','N','A','L','Y','Z','E','X','C','E','P','T',
    'R','A','N','S','A','C','T','I','O','N','A','T','U','R','A','L','T','E',
    'R','A','I','S','E','X','C','L','U','S','I','V','E','X','E','C','O','N',
    'S','T','R','A','I','N','T','E','R','S','E','C','T','R','I','G','G','E',
    'R','E','F','E','R','E','N','C','E','S','A','V','E','P','O','I','N','T',
    'O','F','F','S','E','T','E','M','P','O','R','A','R','Y','B','E','F','O',
    'R','E','A','C','H','E','C','K','E','Y','U','N','I','Q','U','E','R','Y',
    'W','I','T','H','O','U','T','E','R','E','L','E','A','S','E','X','I','S',
    'T','S','A','T','T','A','C','H','A','V','I','N','G','R','O','U','P','D',
    'A','T','E','B','E','G','I','N','N','E','R','E','C','U','R','S','I','V',
    'E','B','E','T','W','E','E','N','O','T','N','U','L','L','I','K','E','C',
    'A','S','C','A','D','E','L','E','T','E','C','A','S','E','C','O','L','L',
    'A','T','E','C','R','E','A','T','E','C','U','R','R','E','N','T','_','D',
    'A','T','E','D','E','T','A','C','H','I','M','M','E','D','I','A','T','E',
    'J','O','I','N','S','E','R','T','M','A','T','C','H','P','R','A','G','M',
    'A','B','O','R','T','V','A','L','U','E','S','V','I','R','T','U','A','L',
    'I','M','I','T','W','H','E','N','W','H','E','R','E','N','A','M','E','A',
    'F','T','E','R','E','P','L','A','C','E','A','N','D','E','F','A','U','L',
    'T','A','U','T','O','I','N','C','R','E','M','E','N','T','C','A','S','T',
    'C','O','L','U','M','N','C','O','M','M','I','T','C','O','N','F','L','I',
    'C','T','C','R','O','S','S','C','U','R','R','E','N','T','_','T','I','M',
    'E','S','T','A','M','P','A','R','T','I','T','I','O','N','D','E','F','E',
    'R','R','E','D','E','F','I','N','E','D','I','S','T','I','N','C','T','D',
    'R','O','P','R','I','M','A','R','Y','F','A','I','L','O','O','P','F','R',
    'O','M','F','U','L','L','U','C','I','A','G','L','O','B','Y','I','S','N',
    'U','L','L','O','R','D','E','R','E','S','T','R','I','C','T','O','V','E',
    'R','I','G','H','T','R','O','L','L','B','A','C','K','R','O','W','E','B',
    'G','R','P','U','N','I','O','N','U','S','I','N','G','V','A','C','U','U',
    'M','W','E','B','P','R','O','C','W','E','B','P','W','D','W','E','B','U',
    'S','R','W','E','B','V','I','E','W','I','N','I','T','I','A','L','L','Y',
  };
  static const unsigned char aHash[127] = {
      82, 110, 125,  80, 106,  45,   0,   0,  86,   0,  83, 127,   0,
     133,  22,  24,  15,   0, 124,  89,  60,  19,   0, 117,   0,   0,
     130,   0, 128, 122,   0,  23,  97,   0,  47,   0,  18,  76,  77,
       0,  75,  49,   0,  53,  94, 112,   0, 126, 105,   0,   0,  44,
       0, 107,  17,   0,  12,   0, 135,  59,  11,   0,   5, 134,   6,
     100,   0,   0, 137, 111,  66, 136,  63,  50,  61,   0,  95,   0,
     104,  26,   0, 103,   0,   0,   0,  99,  96, 101,  92, 116,  14,
      35, 115,   0,  85,   0,  13,  93, 119,  32,   0, 129,  84, 120,
      68,  46,  88,   0,   0,  98,  40, 123, 121,   0,  36, 131,   0,
      29,   0, 132,  69,  70,   0,   8,  67,   0,  62,
  };
  static const unsigned char aNext[137] = {
       0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   2,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,  33,   0,   9,   0,   1,   0,  28,   0,   0,
       0,   0,   0,   0,  55,   0,   0,  43,   3,  52,   0,   0,   0,
       0,  30,   0,  64,   0,  38,   0,   0,  34,  48,  72,   0,   0,
      73,   0,  41,   0,   0,   0,   0,  54,  71,   0,   0,   0,   0,
      31,  57,  16,  58,  20,   0,   0,   0,   0,   0,   0,   0,  21,
      78,   0,   0,  74,  51,   0, 109,  25, 102,   0,   0, 113,   7,
       0,  91,  81,  56,   0,  65,  27,  37,  79,   0,  87, 114,  39,
       0,  90,  42, 118, 108,   0,   0,
  };
  static const unsigned char aLen[137] = {
       7,   7,   5,   4,   6,   4,   6,   5,   4,   4,   3,   8,   2,
       7,   7,   3,  10,   5,   2,   7,   3,   6,   6,   4,   7,   6,
      11,   6,   2,   7,   5,   5,   9,   4,  10,   9,   7,  10,   9,
       4,   6,   2,   3,   9,   4,   2,   6,   7,   4,   5,   3,   6,
       5,   7,   4,   5,   7,   6,   6,   6,   5,   6,   5,   5,   9,
       7,   7,   3,   2,   4,   4,   7,   3,   6,   4,   7,   6,  12,
       6,   9,   4,   6,   5,   6,   5,   6,   7,   5,   4,   5,   6,
       5,   7,   3,   7,  13,   2,   2,   4,   6,   6,   8,   5,  17,
      12,   9,   8,   6,   8,   2,   4,   7,   4,   4,   4,   4,   5,
       4,   2,   6,   5,   8,   4,   5,   8,   3,   6,   5,   5,   6,
       7,   6,   6,   7,   4,   9,   3,
  };
  static const unsigned short int aOffset[137] = {
       0,   2,   2,   8,   9,  14,  16,  21,  24,  27,  29,  31,  36,
      38,  43,  48,  50,  59,  62,  63,  63,  67,  71,  76,  78,  84,
      89,  94,  98,  99, 104, 108, 112, 120, 123, 130, 138, 144, 153,
     159, 162, 162, 165, 167, 167, 171, 176, 178, 181, 183, 187, 190,
     193, 198, 198, 202, 206, 212, 218, 223, 228, 231, 237, 240, 244,
     253, 259, 259, 259, 262, 265, 269, 270, 274, 280, 284, 291, 297,
     309, 315, 324, 326, 332, 337, 342, 347, 353, 359, 364, 368, 371,
     377, 381, 388, 390, 397, 399, 401, 410, 414, 420, 426, 434, 439,
     439, 455, 464, 471, 477, 478, 485, 488, 495, 498, 502, 506, 509,
     514, 517, 519, 525, 529, 537, 540, 545, 553, 555, 561, 566, 571,
     577, 584, 590, 596, 599, 603, 608,
  };
  static const unsigned char aCode[137] = {
    TK_REINDEX,    TK_INDEXED,    TK_INDEX,      TK_DESC,       TK_ESCAPE,     
    TK_ELSE,       TK_SELECT,     TK_TABLE,      TK_JOIN_KW,    TK_THEN,       
    TK_END,        TK_DATABASE,   TK_AS,         TK_EXPLAIN,    TK_INSTEAD,    
    TK_ADD,        TK_DEFERRABLE, TK_ELSIF,      TK_IF,         TK_FOREIGN,    
    TK_FOR,        TK_IGNORE,     TK_LIKE_KW,    TK_PLAN,       TK_ANALYZE,    
    TK_EXCEPT,     TK_TRANSACTION,TK_ACTION,     TK_ON,         TK_JOIN_KW,    
    TK_ALTER,      TK_RAISE,      TK_EXCLUSIVE,  TK_EXEC,       TK_CONSTRAINT, 
    TK_INTERSECT,  TK_TRIGGER,    TK_REFERENCES, TK_SAVEPOINT,  TK_INTO,       
    TK_OFFSET,     TK_OF,         TK_SET,        TK_TEMP,       TK_TEMP,       
    TK_OR,         TK_BEFORE,     TK_FOREACH,    TK_EACH,       TK_CHECK,      
    TK_KEY,        TK_UNIQUE,     TK_QUERY,      TK_WITHOUT,    TK_WITH,       
    TK_JOIN_KW,    TK_RELEASE,    TK_EXISTS,     TK_ATTACH,     TK_HAVING,     
    TK_GROUP,      TK_UPDATE,     TK_BEGIN,      TK_JOIN_KW,    TK_RECURSIVE,  
    TK_BETWEEN,    TK_NOTNULL,    TK_NOT,        TK_NO,         TK_NULL,       
    TK_LIKE_KW,    TK_CASCADE,    TK_ASC,        TK_DELETE,     TK_CASE,       
    TK_COLLATE,    TK_CREATE,     TK_CTIME_KW,   TK_DETACH,     TK_IMMEDIATE,  
    TK_JOIN,       TK_INSERT,     TK_MATCH,      TK_PRAGMA,     TK_ABORT,      
    TK_VALUES,     TK_VIRTUAL,    TK_LIMIT,      TK_WHEN,       TK_WHERE,      
    TK_RENAME,     TK_AFTER,      TK_REPLACE,    TK_AND,        TK_DEFAULT,    
    TK_AUTOINCR,   TK_TO,         TK_IN,         TK_CAST,       TK_COLUMNKW,   
    TK_COMMIT,     TK_CONFLICT,   TK_JOIN_KW,    TK_CTIME_KW,   TK_CTIME_KW,   
    TK_PARTITION,  TK_DEFERRED,   TK_DEFINE,     TK_DISTINCT,   TK_IS,         
    TK_DROP,       TK_PRIMARY,    TK_FAIL,       TK_LOOP,       TK_FROM,       
    TK_JOIN_KW,    TK_LUCIA,      TK_LIKE_KW,    TK_BY,         TK_ISNULL,     
    TK_ORDER,      TK_RESTRICT,   TK_OVER,       TK_JOIN_KW,    TK_ROLLBACK,   
    TK_ROW,        TK_WEBGRP,     TK_UNION,      TK_USING,      TK_VACUUM,     
    TK_WEBPROC,    TK_WEBPWD,     TK_WEBUSR,     TK_WEBVIEW,    TK_VIEW,       
    TK_INITIALLY,  TK_ALL,        
  };
  int i, j;
  const char *zKW;
  if( n>=2 ){
    i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n) % 127;
    for(i=((int)aHash[i])-1; i>=0; i=((int)aNext[i])-1){
      if( aLen[i]!=n ) continue;
      j = 0;
      zKW = &zText[aOffset[i]];
#ifdef SQLITE_ASCII
      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
#endif
#ifdef SQLITE_EBCDIC
      while( j<n && toupper(z[j])==zKW[j] ){ j++; }
#endif
      if( j<n ) continue;
      testcase( i==0 ); /* REINDEX */
      testcase( i==1 ); /* INDEXED */
      testcase( i==2 ); /* INDEX */
      testcase( i==3 ); /* DESC */
      testcase( i==4 ); /* ESCAPE */
      testcase( i==5 ); /* ELSE */
      testcase( i==6 ); /* SELECT */
      testcase( i==7 ); /* TABLE */
      testcase( i==8 ); /* LEFT */
      testcase( i==9 ); /* THEN */
      testcase( i==10 ); /* END */
      testcase( i==11 ); /* DATABASE */
      testcase( i==12 ); /* AS */
      testcase( i==13 ); /* EXPLAIN */
      testcase( i==14 ); /* INSTEAD */
      testcase( i==15 ); /* ADD */
      testcase( i==16 ); /* DEFERRABLE */
      testcase( i==17 ); /* ELSIF */
      testcase( i==18 ); /* IF */
      testcase( i==19 ); /* FOREIGN */
      testcase( i==20 ); /* FOR */
      testcase( i==21 ); /* IGNORE */
      testcase( i==22 ); /* REGEXP */
      testcase( i==23 ); /* PLAN */
      testcase( i==24 ); /* ANALYZE */
      testcase( i==25 ); /* EXCEPT */
      testcase( i==26 ); /* TRANSACTION */
      testcase( i==27 ); /* ACTION */
      testcase( i==28 ); /* ON */
      testcase( i==29 ); /* NATURAL */
      testcase( i==30 ); /* ALTER */
      testcase( i==31 ); /* RAISE */
      testcase( i==32 ); /* EXCLUSIVE */
      testcase( i==33 ); /* EXEC */
      testcase( i==34 ); /* CONSTRAINT */
      testcase( i==35 ); /* INTERSECT */
      testcase( i==36 ); /* TRIGGER */
      testcase( i==37 ); /* REFERENCES */
      testcase( i==38 ); /* SAVEPOINT */
      testcase( i==39 ); /* INTO */
      testcase( i==40 ); /* OFFSET */
      testcase( i==41 ); /* OF */
      testcase( i==42 ); /* SET */
      testcase( i==43 ); /* TEMPORARY */
      testcase( i==44 ); /* TEMP */
      testcase( i==45 ); /* OR */
      testcase( i==46 ); /* BEFORE */
      testcase( i==47 ); /* FOREACH */
      testcase( i==48 ); /* EACH */
      testcase( i==49 ); /* CHECK */
      testcase( i==50 ); /* KEY */
      testcase( i==51 ); /* UNIQUE */
      testcase( i==52 ); /* QUERY */
      testcase( i==53 ); /* WITHOUT */
      testcase( i==54 ); /* WITH */
      testcase( i==55 ); /* OUTER */
      testcase( i==56 ); /* RELEASE */
      testcase( i==57 ); /* EXISTS */
      testcase( i==58 ); /* ATTACH */
      testcase( i==59 ); /* HAVING */
      testcase( i==60 ); /* GROUP */
      testcase( i==61 ); /* UPDATE */
      testcase( i==62 ); /* BEGIN */
      testcase( i==63 ); /* INNER */
      testcase( i==64 ); /* RECURSIVE */
      testcase( i==65 ); /* BETWEEN */
      testcase( i==66 ); /* NOTNULL */
      testcase( i==67 ); /* NOT */
      testcase( i==68 ); /* NO */
      testcase( i==69 ); /* NULL */
      testcase( i==70 ); /* LIKE */
      testcase( i==71 ); /* CASCADE */
      testcase( i==72 ); /* ASC */
      testcase( i==73 ); /* DELETE */
      testcase( i==74 ); /* CASE */
      testcase( i==75 ); /* COLLATE */
      testcase( i==76 ); /* CREATE */
      testcase( i==77 ); /* CURRENT_DATE */
      testcase( i==78 ); /* DETACH */
      testcase( i==79 ); /* IMMEDIATE */
      testcase( i==80 ); /* JOIN */
      testcase( i==81 ); /* INSERT */
      testcase( i==82 ); /* MATCH */
      testcase( i==83 ); /* PRAGMA */
      testcase( i==84 ); /* ABORT */
      testcase( i==85 ); /* VALUES */
      testcase( i==86 ); /* VIRTUAL */
      testcase( i==87 ); /* LIMIT */
      testcase( i==88 ); /* WHEN */
      testcase( i==89 ); /* WHERE */
      testcase( i==90 ); /* RENAME */
      testcase( i==91 ); /* AFTER */
      testcase( i==92 ); /* REPLACE */
      testcase( i==93 ); /* AND */
      testcase( i==94 ); /* DEFAULT */
      testcase( i==95 ); /* AUTOINCREMENT */
      testcase( i==96 ); /* TO */
      testcase( i==97 ); /* IN */
      testcase( i==98 ); /* CAST */
      testcase( i==99 ); /* COLUMN */
      testcase( i==100 ); /* COMMIT */
      testcase( i==101 ); /* CONFLICT */
      testcase( i==102 ); /* CROSS */
      testcase( i==103 ); /* CURRENT_TIMESTAMP */
      testcase( i==104 ); /* CURRENT_TIME */
      testcase( i==105 ); /* PARTITION */
      testcase( i==106 ); /* DEFERRED */
      testcase( i==107 ); /* DEFINE */
      testcase( i==108 ); /* DISTINCT */
      testcase( i==109 ); /* IS */
      testcase( i==110 ); /* DROP */
      testcase( i==111 ); /* PRIMARY */
      testcase( i==112 ); /* FAIL */
      testcase( i==113 ); /* LOOP */
      testcase( i==114 ); /* FROM */
      testcase( i==115 ); /* FULL */
      testcase( i==116 ); /* LUCIA */
      testcase( i==117 ); /* GLOB */
      testcase( i==118 ); /* BY */
      testcase( i==119 ); /* ISNULL */
      testcase( i==120 ); /* ORDER */
      testcase( i==121 ); /* RESTRICT */
      testcase( i==122 ); /* OVER */
      testcase( i==123 ); /* RIGHT */
      testcase( i==124 ); /* ROLLBACK */
      testcase( i==125 ); /* ROW */
      testcase( i==126 ); /* WEBGRP */
      testcase( i==127 ); /* UNION */
      testcase( i==128 ); /* USING */
      testcase( i==129 ); /* VACUUM */
      testcase( i==130 ); /* WEBPROC */
      testcase( i==131 ); /* WEBPWD */
      testcase( i==132 ); /* WEBUSR */
      testcase( i==133 ); /* WEBVIEW */
      testcase( i==134 ); /* VIEW */
      testcase( i==135 ); /* INITIALLY */
      testcase( i==136 ); /* ALL */
      *pType = aCode[i];
      break;
    }
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  keywordCode((char*)z, n, &id);
  return id;
}
#define SQLITE_N_KEYWORD 137
